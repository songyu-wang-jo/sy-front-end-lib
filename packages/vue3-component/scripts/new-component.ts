import * as process from 'process'
import * as path from 'path'
import * as fs from 'fs'
import chalk from 'chalk'

function upperCaseToHLine (str: string): string {
  const upperCaseTest = /([A-Z])/g
  return str.replace(upperCaseTest, '-$1').substring(1).toLowerCase()
}

/**
 * 获取用户输入组件名称
 */
async function getComponentName (): Promise<string> {
  return await new Promise<string>((resolve, reject) => {
    fs.readFile('components.json', { encoding: 'utf-8' }, (err, data) => {
      if (err !== null) reject(err)
      const componentMap = JSON.parse(data)
      const nameTest: RegExp = /^[A-Z][A-Za-z]*[A-Za-z]$/
      process.stdout.write('请输入创建的组件名（大驼峰：CharStringCar）: ')
      const componentInput = process.stdin.on('data', input => {
        const componentNameJustInput = input.toString().trim()
        if (!nameTest.test(componentNameJustInput)) {
          process.stdout.write(chalk.yellow('组件名不合法，请重新输入（大驼峰：CharStringCar）: '))
        } else if (componentMap[componentNameJustInput] !== undefined) {
          process.stdout.write(chalk.yellow('组件名已经存在，请重新输入: '))
        } else {
          componentMap[upperCaseToHLine(componentNameJustInput)] = { createTime: new Date().toUTCString(), name: componentNameJustInput }
          componentInput.pause()
          fs.writeFile('components.json', JSON.stringify(componentMap, null, '\t'), { encoding: 'utf-8' }, (err) => {
            if (err !== null) {
              reject(new Error(`更新组件注册文件 components.json 失败 << ${String(err)}`))
            } else {
              resolve(componentNameJustInput)
            }
          })
        }
      })
    })
  })
}

void getComponentName().then(componentName => {
  const componentDirName = upperCaseToHLine(componentName)
  const componentDirPath = path.resolve(process.cwd(), 'src', 'components', componentDirName)
  const componentSrcDirPath = path.resolve(componentDirPath, 'src')
  fs.mkdirSync(componentSrcDirPath, { recursive: true })
  console.log(chalk.green(`成功创建组件文件夹: ${componentSrcDirPath}.`))
  fs.writeFile(path.resolve(componentDirPath, 'index.ts'),
        `// generated by new-component script
import { defineComponent } from 'vue'

const ${componentName} = defineComponent({
  name: 'Sy${componentName}',
  props: {},
  render () {
    return '<div>${componentName} just inited!</div>'
  }
})

export default ${componentName}
`,
        err => {
          if (err != null) {
            console.log(chalk.red(`文件创建失败 << ${String(err)}`))
          }
          console.log(chalk.green('组件文件初始化成功！！！'))
        })
}).catch(err => {
  console.log(chalk.red(`新建组件失败 << ${String(err)}`))
})
